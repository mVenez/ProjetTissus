[Question P1.1]
Les vecteurs sont des objets d'une classe Vecteur3D, avec trois attributs x, y et z qui representent les trois cordonnées dans l'espace.
La classe mets à disposition du public les méthodes suivantes : 
- set_coord() assigne une valeur à une coordonnée choisie, 
- affiche() affiche d'une maniere simple les coordonnées du vecteur, 
- compare() permet de tester l'egalité entre deux vecteurs (à 1e-10 près). Pour cela il a acces aux attributs privés d'un autre objet vecteur, comme ils sont de la meme classe.
- addition(), soustraction(), mult(), oppose(), prod_scal(), prod_vect(), norme(), norme2() sont des opération de base sur les vecteurs 
- unitaire(), renvoie le vecteur unitaire associé au vecteur, (renvoie le vecteur nul si vecteur nul en entrée)
Toutes ces méthodes sont public car elle on pour but d’être utilisé en dehors du .h
En effet, ici, il n’y à pas de méthodes qui servent uniquement au fonctionnement interne de la class

[Question P4.1]
Non, à ce moment là on n'a pas ajouté un constructeur de copie car, ne sachant encore pas des possibles applications de la classe, on considère le constructeur de copie de default suffisant.
On a testé la copie de default et elle ne donne pas de problèmes pour le moment.

[Question P4.2]
a - Il y a plusiers methodes de implementer ça. 
On pourrait ajouter les trois attributs necessaires et modifier le constructeur, qui accepterait un parametre en plus ("Est-ce qu'on input des coordonnées cartesiennes ou spheriques?") et lors de la construction genererait tous le 6 attributs.
On pourrait aussi garder les 3 attributs, qui auront un nom generique, et écrire une methode traduire() qui permetterait de changer entre coordonnées cartesiennes et spheriques. 
b - Une grande difficulté serait la definition des methodes. À ce moment là toutes les methodes marchent avec des coordonnées cartesiennes. On devrait écrire des methodes jumelles qui feraint le même travail mais en spherique.

[Question P4.3]
Pour transformer affiche() et compare() en operateur nous avons surchargé respectivement operator<< et operator==, le premier avec une surcharge externe et le deuxieme avec une surcharge externe. De plus pour nous avons 

[Question P5.1]
Nous avons choisi d’implémenter les ressorts de la manière suivante :
Lors de la création d’un ressort, celui-ci prend en paramètre deux masses, une raideur et une longueur à vide.
Le constructeur vérifie que la raideur et la longueur à vide soient positive puis ajoute un pointeur vers le ressort en train d’être construit dans les deux masses auxquelles il est liées.
Avec ce choix d’implémentation, nous voulons principalement nous concentrer sur les masses, et que les ressorts s’adapte automatiquement, par exemple si l’on supprime les deux masses liées à un ressort celui-ci n’a plus de raison d’être et doit donc être supprimé automatiquement.
Nous avons, comme pour les masses, interdit la copie, car pour le moment nous ne voyons pas de cas où il serait utile de copier un ressort.

[Question P7.1]

[Question P7.2]
on à la relation : IntegrateurEulerCromer est-un Integrateur